# SwiftLint configuration for SelectionTap
# Coordinated with .swiftformat to ensure compatibility

# Included/Excluded paths
included:
  - SelectionTap.swift
  - Tests/

excluded:
  - bin/
  - .build/

# Disabled rules that conflict with SwiftFormat or our accessibility code needs
disabled_rules:
  - trailing_comma                   # SwiftFormat handles this (disabled)
  - function_parameter_count         # Our accessibility functions have many parameters
  - vertical_whitespace              # SwiftFormat manages spacing
  - opening_brace                    # SwiftFormat handles brace style
  - closure_spacing                  # SwiftFormat manages closure formatting
  - operator_whitespace              # SwiftFormat handles operator spacing
  - comma                            # SwiftFormat manages comma placement
  - colon                            # SwiftFormat handles colon spacing
  - return_arrow_whitespace          # SwiftFormat manages arrow spacing
  - statement_position               # SwiftFormat controls statement positioning
  - conditional_returns_on_newline   # Conflicts with SwiftFormat guard/if formatting
  - force_cast                       # Accessibility APIs require force casting CFTypeRef
  - function_body_length             # Accessibility functions are complex by nature

# Opt-in rules (that work well with SwiftFormat)
opt_in_rules:
  - array_init
  - empty_count
  - explicit_init
  - fatal_error_message
  - first_where
  - force_unwrapping                  # We'll allow but warn
  - implicit_return
  - joined_default_parameter
  - overridden_super_call
  - pattern_matching_keywords
  - prefer_self_type_over_type_of_self
  - redundant_nil_coalescing
  - sorted_first_last
  - toggle_bool
  - unneeded_parentheses_in_closure_argument
  - yoda_condition

# Rule customization (aligned with SwiftFormat settings)
line_length:
  warning: 100                       # Matches SwiftFormat maxwidth
  error: 120
  ignores_urls: true
  ignores_function_declarations: true
  ignores_comments: true

# function_body_length disabled due to accessibility API complexity

file_length:
  warning: 600                         # Increased for accessibility-heavy files
  error: 1000

type_body_length:
  warning: 200
  error: 300

identifier_name:
  min_length:
    warning: 2
    error: 1
  max_length:
    warning: 40
    error: 60
  excluded:
    - x
    - y
    - id
    - ts          # timestamp
    - pb          # pasteboard
    - ax          # accessibility
    - ui          # user interface
    - v           # Common for temporary CFTypeRef variables
    - s           # Common for temporary String variables
    - p           # Point variable
    - h           # Height variable

large_tuple:
  warning: 3
  error: 4

# Force unwrapping configuration
force_unwrapping:
  severity: warning                   # Allow ! but warn (accessibility APIs need it)

# Custom rules for our specific codebase
custom_rules:
  # Ensure proper logging levels
  log_level_usage:
    name: "Log Level Usage"
    regex: '(?<!func\s)print\('
    message: "Use structured logging (logError, logWarn, logInfo, logDebug) instead of print"
    severity: warning

  # Accessibility API error handling
  ax_error_handling:
    name: "Accessibility Error Handling" 
    regex: 'AXUIElementCopy.*\s*==\s*\.success(?!\s*,)'
    message: "Consider adding error handling for accessibility API calls"
    severity: warning
    
  # Performance critical paths should use @inline
  performance_critical:
    name: "Performance Critical Functions"
    regex: 'func\s+(mousePoint|emit|log)\('
    message: "Consider @inline(__always) for performance-critical functions"
    severity: warning